plt_happiness = ggplot(df_mat, aes(x=sch_var, y=Happiness)) +
geom_point(size=.8) + geom_smooth() +
ggtitle("Happiness") + ylab("Topic Proportion") +  xlab("") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
plot.title = element_text(hjust = 0.5, size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
plt_inspect = ggplot(df_mat, aes(x=sch_var, y=Inspections)) +
geom_point(size=.8) + geom_smooth() +
ggtitle("Inspections") + ylab("Topic Proportion") +  xlab("Maths Progress Measure") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
plot.title = element_text(hjust = 0.5, size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
plt_success = ggplot(df_mat, aes(x=sch_var, y=Success)) +
geom_point(size=.8) + geom_smooth() +
ggtitle("Success") + ylab("") +  xlab("") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
plot.title = element_text(hjust = 0.5, size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
plt_support = ggplot(df_mat, aes(x=sch_var, y=Support)) +
geom_point(size=.8) + geom_smooth() +
ggtitle("Support") + ylab("") +  xlab("") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
plot.title = element_text(hjust = 0.5, size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
plt_develop = ggplot(df_mat, aes(x=sch_var, y=Development)) +
geom_point(size=.8) + geom_smooth() +
ggtitle("Development") + ylab("") +  xlab("Maths Progress Measure") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
plot.title = element_text(hjust = 0.5, size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
pdf("performance.pdf", width=9, height=8)
multiplot(plt_offerings, plt_happiness, plt_inspect,
plt_success, plt_support, plt_develop, cols=2)
dev.off()
## Maintained schools and academies inspections and outcomes as at 31 August 2016:
ofsted = read.csv('../datasets/Ofsted.csv')
ofsted = ofsted[,c('URN', 'Overall.effectiveness')]
df = merge(df, ofsted, by='URN', all.x=TRUE)
##Number obs getting each Ofsted grade
ggplot(df, aes(factor(Overall.effectiveness))) +
geom_bar()
colnames(df)
##Number obs getting each Ofsted grade
ggplot(df, aes(factor(Grade))) +
geom_bar(fill="blue") +
ylab("Frequency") +
xlab("Ofsted Grade") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
df$Grade = NA
df[which(dat$Overall.effectiveness==1),]$Grade = "Outstanding"
df[which(dat$Overall.effectiveness==2),]$Grade = "Good"
df[which(dat$Overall.effectiveness==3),]$Grade = "Satisfactory"
df[which(dat$Overall.effectiveness==4),]$Grade = "Inadequate"
df$Grade = NA
df[which(dat$Overall.effectiveness==1),]$Grade = "Outstanding"
df$Grade
df[which(dat$Overall.effectiveness==1),]$Grade
dat$Overall.effectiveness
colnames(df)
df$Grade = NA
df[which(df$Overall.effectiveness==1),]$Grade = "Outstanding"
df[which(df$Overall.effectiveness==2),]$Grade = "Good"
df[which(df$Overall.effectiveness==3),]$Grade = "Satisfactory"
df[which(df$Overall.effectiveness==4),]$Grade = "Inadequate"
ggplot(df, aes(factor(Grade))) +
geom_bar(fill="blue") +
ylab("Frequency") +
xlab("Ofsted Grade") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(df[!is.na(df$Grade),], aes(factor(Grade))) +
geom_bar(fill="blue") +
ylab("Frequency") +
xlab("Ofsted Grade") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(df[!is.na(df$Grade),], aes(factor(Grade))) +
geom_bar(fill="blue") +
ylab("Frequency") +
xlab("Ofsted Grade") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
saveplot(ofsted_grades, "ofsted_grades")
ofsted_grades = ggplot(df[!is.na(df$Grade),], aes(factor(Grade))) +
geom_bar(fill="blue") +
ylab("Frequency") +
xlab("Ofsted Grade") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
saveplot(ofsted_grades, "ofsted_grades")
ofsted_grades = unique(df$Overall.effectiveness)[1:4]
topics = colnames(lda)[3:length(colnames(lda))]
school_grades = data.frame(matrix(NA, ncol=length(ofsted_grades), nrow=length(topics)),
row.names=topics)
colnames(school_grades) = ofsted_grades
for (i in 1:length(ofsted_grades)){
for (j in 1:length(topics)){
school_grades[j,i] = mean(df[which(df$Overall.effectiveness==ofsted_grades[i]),topics[j]])
}
}
school_grades_m = melt(cbind(school_grades, ind=rownames(school_grades)), id.vars = c('ind'))
ggplot(school_grades_m, aes(x = variable, y = value,fill = ind)) +
geom_bar(position = 'fill',stat = 'identity') +
scale_y_continuous(labels = percent_format())
ofsted_grades = unique(df$Grade)[1:4]
topics = colnames(lda)[3:length(colnames(lda))]
school_grades = data.frame(matrix(NA, ncol=length(ofsted_grades), nrow=length(topics)),
row.names=topics)
colnames(school_grades) = ofsted_grades
for (i in 1:length(ofsted_grades)){
for (j in 1:length(topics)){
school_grades[j,i] = mean(df[which(df$Overall.effectiveness==ofsted_grades[i]),topics[j]])
}
}
school_grades_m = melt(cbind(school_grades, ind=rownames(school_grades)), id.vars = c('ind'))
ofsted_topics = ggplot(school_grades_m, aes(x = variable, y = value,fill = ind)) +
geom_bar(position = 'fill',stat = 'identity') +
scale_y_continuous(labels = percent_format()) +
ylab("Mean Topic Proportions") +
xlab("Ofsted Grade") +
scale_fill_discrete(name="Topics") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ofsted_grades = unique(df$Grade)[1:4]
topics = colnames(lda)[3:length(colnames(lda))]
school_grades = data.frame(matrix(NA, ncol=length(ofsted_grades), nrow=length(topics)),
row.names=topics)
colnames(school_grades) = ofsted_grades
for (i in 1:length(ofsted_grades)){
for (j in 1:length(topics)){
school_grades[j,i] = mean(df[which(df$Overall.effectiveness==ofsted_grades[i]),topics[j]])
}
}
school_grades_m = melt(cbind(school_grades, ind=rownames(school_grades)), id.vars = c('ind'))
ofsted_topics = ggplot(school_grades_m, aes(x = variable, y = value,fill = ind)) +
geom_bar(position = 'fill',stat = 'identity') +
scale_y_continuous(labels = percent_format()) +
ylab("Mean Topic Proportions") +
xlab("Ofsted Grade") +
scale_fill_discrete(name="Topics") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ofsted_topics
ofsted_grades = unique(df$Grade)
topics = colnames(lda)[3:length(colnames(lda))]
school_grades = data.frame(matrix(NA, ncol=length(ofsted_grades), nrow=length(topics)),
row.names=topics)
colnames(school_grades) = ofsted_grades
for (i in 1:length(ofsted_grades)){
for (j in 1:length(topics)){
school_grades[j,i] = mean(df[which(df$Overall.effectiveness==ofsted_grades[i]),topics[j]])
}
}
school_grades_m = melt(cbind(school_grades, ind=rownames(school_grades)), id.vars = c('ind'))
ofsted_topics = ggplot(school_grades_m, aes(x = variable, y = value,fill = ind)) +
geom_bar(position = 'fill',stat = 'identity') +
scale_y_continuous(labels = percent_format()) +
ylab("Mean Topic Proportions") +
xlab("Ofsted Grade") +
scale_fill_discrete(name="Topics") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
saveplot(ofsted_topics, "ofsted_topics")
ofsted_grades
topics
ofsted_grades = unique(df[!is.na(df$Grade),]$Grade)
ofsted_grades
topics = colnames(lda)[3:length(colnames(lda))]
school_grades = data.frame(matrix(NA, ncol=length(ofsted_grades), nrow=length(topics)),
row.names=topics)
colnames(school_grades) = ofsted_grades
school_grades
for (i in 1:length(ofsted_grades)){
for (j in 1:length(topics)){
red_df = df[!is.na(df$Grade),]
school_grades[j,i] = mean(red_df[which(_reddf$Overall.effectiveness==ofsted_grades[i]),topics[j]])
}
}
red_df = df[!is.na(df$Grade),]
red_df = df[!is.na(df$Grade),]
for (i in 1:length(ofsted_grades)){
for (j in 1:length(topics)){
school_grades[j,i] = mean(red_df[which(reddf$Overall.effectiveness==ofsted_grades[i]),topics[j]])
}
}
red_df = df[!is.na(df$Grade),]
for (i in 1:length(ofsted_grades)){
for (j in 1:length(topics)){
school_grades[j,i] = mean(red_df[which(red_df$Overall.effectiveness==ofsted_grades[i]),topics[j]])
}
}
school_grades
ofsted_grades = unique(df[!is.na(df$Grade),]$Grade)
topics = colnames(lda)[3:length(colnames(lda))]
school_grades = data.frame(matrix(NA, ncol=length(ofsted_grades), nrow=length(topics)),
row.names=topics)
colnames(school_grades) = ofsted_grades
red_df = df[!is.na(df$Grade),]
for (i in 1:length(ofsted_grades)){
for (j in 1:length(topics)){
school_grades[j,i] = mean(red_df[which(red_df$Overall.effectiveness==ofsted_grades[i]),topics[j]])
}
}
(school_grades
)
i=1
j=1
red_df[which(red_df$Overall.effectiveness==ofsted_grades[i]),topics[j]]
which(red_df$Overall.effectiveness==ofsted_grades[i])
for (i in 1:length(ofsted_grades)){
for (j in 1:length(topics)){
school_grades[j,i] = mean(red_df[which(red_df$Grade==ofsted_grades[i]),topics[j]])
}
}
school_grades
school_grades_m = melt(cbind(school_grades, ind=rownames(school_grades)), id.vars = c('ind'))
ofsted_topics = ggplot(school_grades_m, aes(x = variable, y = value,fill = ind)) +
geom_bar(position = 'fill',stat = 'identity') +
scale_y_continuous(labels = percent_format()) +
ylab("Mean Topic Proportions") +
xlab("Ofsted Grade") +
scale_fill_discrete(name="Topics") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
saveplot(ofsted_topics, "ofsted_topics")
ofsted_topics
round(school_grades*100,0)
library(ggplot2)
library(reshape)
library(scales)
rm(list=ls())
setwd('/Users/sambarrows/Dropbox/Projects/school_websites/notebooks')
##Load lda output
lda = read.csv('../my_datasets/lda_dat.csv')
nrow(lda)
##Add variable with collapsed school types
school_char = read.csv('../my_datasets/prepped.csv')
school_char = school_char[,c('URN', 'school_type', 'blurb')]
nrow(school_char)
##Add relevant edubase data (for now, just Phase of Education)
edubase = read.csv('../datasets/edubase_datasets/edubasealldata.csv')
edubase = edubase[,c('URN', 'PhaseOfEducation..name.')]
##Merge lda and school characteristics data
df = merge(lda, school_char, by='URN', all.x=TRUE)
nrow(df)
##Then merge with edbuase data
df = merge(df, edubase, by='URN', all.x=TRUE)
nrow(df)
names(df)[names(df)=='PhaseOfEducation..name.'] = 'Phase'
rm(school_char, edubase)
#################################
##Variation across school types##
##Ofsted data from:https://www.gov.uk/government/statistics/maintained-schools-and-academies-inspections-and-outcomes-as-at-31-august-2016
## Overall effectiveness: 1 outstanding, 2 good, 3 satisfactory, 4 inadequate
## (see http://www.education.gov.uk/schools/performance/2013/secondary_13/s13.html)
## Maintained schools and academies inspections and outcomes as at 31 August 2016:
ofsted = read.csv('../datasets/Ofsted.csv')
ofsted = ofsted[,c('URN', 'Overall.effectiveness')]
df = merge(df, ofsted, by='URN', all.x=TRUE)
df$Grade = NA
df[which(df$Overall.effectiveness==1),]$Grade = "Outstanding"
df[which(df$Overall.effectiveness==2),]$Grade = "Good"
df[which(df$Overall.effectiveness==3),]$Grade = "Satisfactory"
df[which(df$Overall.effectiveness==4),]$Grade = "Inadequate"
##Number obs getting each Ofsted grade
ofsted_grades = ggplot(df[!is.na(df$Grade),], aes(factor(Grade))) +
geom_bar(fill="blue") +
ylab("Frequency") +
xlab("Ofsted Grade") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
saveplot(ofsted_grades, "ofsted_grades")
##Average proportion for each topic, by Ofsted performance
ofsted_grades = unique(df[!is.na(df$Grade),]$Grade)
topics = colnames(lda)[3:length(colnames(lda))]
school_grades = data.frame(matrix(NA, ncol=length(ofsted_grades), nrow=length(topics)),
row.names=topics)
colnames(school_grades) = ofsted_grades
red_df = df[!is.na(df$Grade),]
for (i in 1:length(ofsted_grades)){
for (j in 1:length(topics)){
school_grades[j,i] = mean(red_df[which(red_df$Grade==ofsted_grades[i]),topics[j]])
}
}
school_grades_m = melt(cbind(school_grades, ind=rownames(school_grades)), id.vars = c('ind'))
ofsted_topics = ggplot(school_grades_m, aes(x = variable, y = value,fill = ind)) +
geom_bar(position = 'fill',stat = 'identity', colour=cornsilk) +
scale_y_continuous(labels = percent_format()) +
ylab("Mean Topic Proportions") +
xlab("Ofsted Grade") +
scale_fill_discrete(name="Topics") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
saveplot(ofsted_topics, "ofsted_topics")
round(school_grades*100,0)
##School judged inadequate have higher proportions for discussion of success.
##Let's take a look at these examples (although few of them)
# ggplot(df, aes(df$Inspections)) + geom_histogram()
# df[which(df$Overall.effectiveness==4 &  df$Inspections>.2), 'URN']
# df[which(df$Overall.effectiveness==4 &  df$Inspections>.2), 'blurb'][1:5]
ofsted_grades = ggplot(df[!is.na(df$Grade),], aes(factor(Grade))) +
geom_bar(fill="cornsilk") +
ylab("Frequency") +
xlab("Ofsted Grade") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
saveplot(ofsted_grades, "ofsted_grades")
saveplot <- function(myPlot, myPlot_name){
pdf(paste(myPlot_name,".pdf",sep=""), width=9, height=5)
print(myPlot)
dev.off()
}
saveplot(phase_school, "hist_phase_school")
library(ggplot2)
library(reshape)
library(scales)
rm(list=ls())
setwd('/Users/sambarrows/Dropbox/Projects/school_websites/notebooks')
##Load lda output
lda = read.csv('../my_datasets/lda_dat.csv')
nrow(lda)
##Add variable with collapsed school types
school_char = read.csv('../my_datasets/prepped.csv')
school_char = school_char[,c('URN', 'school_type', 'blurb')]
nrow(school_char)
##Add relevant edubase data (for now, just Phase of Education)
edubase = read.csv('../datasets/edubase_datasets/edubasealldata.csv')
edubase = edubase[,c('URN', 'PhaseOfEducation..name.')]
##Merge lda and school characteristics data
df = merge(lda, school_char, by='URN', all.x=TRUE)
nrow(df)
##Then merge with edbuase data
df = merge(df, edubase, by='URN', all.x=TRUE)
nrow(df)
names(df)[names(df)=='PhaseOfEducation..name.'] = 'Phase'
rm(school_char, edubase)
##Function for saving plots
saveplot <- function(myPlot, myPlot_name){
pdf(paste(myPlot_name,".pdf",sep=""), width=9, height=5)
print(myPlot)
dev.off()
}
##########
## Maintained schools and academies inspections and outcomes as at 31 August 2016:
ofsted = read.csv('../datasets/Ofsted.csv')
ofsted = ofsted[,c('URN', 'Overall.effectiveness')]
df = merge(df, ofsted, by='URN', all.x=TRUE)
df$Grade = NA
df[which(df$Overall.effectiveness==1),]$Grade = "Outstanding"
df[which(df$Overall.effectiveness==2),]$Grade = "Good"
df[which(df$Overall.effectiveness==3),]$Grade = "Satisfactory"
df[which(df$Overall.effectiveness==4),]$Grade = "Inadequate"
##Number obs getting each Ofsted grade
ofsted_grades = ggplot(df[!is.na(df$Grade),], aes(factor(Grade))) +
geom_bar(fill="cornsilk") +
ylab("Frequency") +
xlab("Ofsted Grade") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
saveplot(ofsted_grades, "ofsted_grades")
ofsted_grades = ggplot(df[!is.na(df$Grade),], aes(factor(Grade))) +
geom_bar(fill="cornflowerblue") +
ylab("Frequency") +
xlab("Ofsted Grade") +
theme_bw() +
theme(axis.title.x = element_text(size=12),
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
saveplot(ofsted_grades, "ofsted_grades")
library(ggplot2)
library(reshape)
library(scales)
rm(list=ls())
setwd('/Users/sambarrows/Dropbox/Projects/school_websites/notebooks')
##Load lda output
lda = read.csv('../my_datasets/lda_dat.csv')
nrow(lda)
##Add variable with collapsed school types
school_char = read.csv('../my_datasets/prepped.csv')
school_char = school_char[,c('URN', 'school_type', 'blurb')]
nrow(school_char)
##Add relevant edubase data (for now, just Phase of Education)
edubase = read.csv('../datasets/edubase_datasets/edubasealldata.csv')
edubase = edubase[,c('URN', 'PhaseOfEducation..name.')]
##Merge lda and school characteristics data
df = merge(lda, school_char, by='URN', all.x=TRUE)
nrow(df)
##Then merge with edbuase data
df = merge(df, edubase, by='URN', all.x=TRUE)
nrow(df)
names(df)[names(df)=='PhaseOfEducation..name.'] = 'Phase'
rm(school_char, edubase)
##Function for saving plots
saveplot <- function(myPlot, myPlot_name){
pdf(paste(myPlot_name,".pdf",sep=""), width=9, height=5)
print(myPlot)
dev.off()
}
#################################
##Variation across school types##
#################################
##Number obs in each phase of school
df$Phase1 = as.character(df$Phase)
df[which(df$Phase1=='Middle Deemed Secondary'),]$Phase1 = 'Middle Deemed\n Secondary'
df[which(df$Phase1=='Middle Deemed Primary'),]$Phase1 = 'Middle Deemed\n Primary'
phase_school = ggplot(df, aes(factor(Phase1))) +
geom_bar(fill="cornflowerblue") +
ylab("Frequency") +
xlab("School Phase") +
theme_bw() +
theme(axis.title.x = element_text(size=12),        # can't get vjust to work
axis.title.y = element_text(size=12),
axis.text.x = element_text(size=10, colour='black'),
axis.text.y = element_text(size=10, colour='black'),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#ggsave(filename = 'hist_phase_school.pdf')   # doesn't work - text very small
saveplot(phase_school, "hist_phase_school")
